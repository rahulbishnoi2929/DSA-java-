//binary Search 


// public static int binSearch(int arr[], int key){
//     int start = 0;
//     int end = arr.length-1;

//     while(start<=end){
//         int mid = (end + start)/2;
//         //case 1
//         if (arr[mid] == key) {
//             return mid;
//         }
//         else if (arr[mid]<key){
//             start = mid + 1;
//         }
//         else{
//             end = mid -1;
//         }
//     }

//     return-1; 
// }

//its time complexity is (log n)  


// -----> RECURSION
//factorial

// public static int fact(int n){
//     if (n==0){
//         return 1;
//     }
//     return n* fact(n-1);
// }

//TC=O(n)=SC




//Sum of n
// static int sum(int n){
//    if (n==0){
//     return 0;
//    }

//    return n + sum(n-1);
// };




//Merge Sort 


// public static void mergSort(int arr[], int si, int ei){
//     if(si>=ei){
//         return;
//     }
//     int mid = si + (ei - si)/2;  // or = (si + ei) / 2;
//     mergeSort(arr, si, mid);
//     mergeSort(arr, mid+1, ei);

//     merge(arr, si, mid, ei);
// }

public static void merge(int arr[], int si, int mid, int ei){
    int temp[] = new int [ei-si+1];
    int i = si //idx for 1st sorted part
    int j = mid+1; //idx for 2nd sorted part
    int k = 0; //idx for temp;

    while(i <= mid && j <= ei){
        if (arr[i] < arr[j]){
            temp[k] = arr[i];
            i++;
        } else {
            temp[k] = arr[j];
            j++;
        }
        k++;
    }
    // for leftover elements of 1st sorted part
    while(i <= mid){
        temp[k++] = arr[i++];
    }

    //for leftover elements of 2nd sorted part
    while(j <= ei){
        temp[k++] = arr[j++];
    }
    for (k=0, i=si; k<temp.length; k++, i++){
        arr[i] = temp[k];
    }
}
